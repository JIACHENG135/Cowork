%% Data_Analysis_Tower
clear all; close all; clc
% load Plate_Raman_Example.mat
LoadFileName = 'all'; % File name for loading
% Loading variables
load(LoadFileName)
%% Below is the codes for plotting

[N,C_b,C_s,parents] = tenseg_string_segment(N,C_b,C_s,segments);


lander.Bradius = 0.02*ones(size(C_b,1),1); % Radius of bars [# bars x 1]
lander.Sradius = 0.01*ones(size(C_s,1),1); % Radius of strings [# strings x 1]
lander.Nradius = 0.01*ones(size(N,2),1); % Radius of node spheres [# nodes x 1]

% Plot structure to see what string segmentation looks like
plot_handle1 = tenseg_plot(N,C_b,C_s,[],[],[],[],lander);
axis off
hold on
[X,Y] = meshgrid(-0.8:0.05:0.8,-0.5:0.05:1);
Z = zeros(size(X));
surf(X,Y,Z,'MeshStyle','none','FaceColor',[0.99 0.99 0.99]);
%%

% W = zeros(size(N));
% % W = -F*[zeros(2,size(N,2));ones(1,size(N,2))];
% % W(:,[1,3,8]) = F*[zeros(2,3);ones(1,3)];
% % W(:,[2,4,5]) = -F/3*[zeros(2,3);ones(1,3)];
% 
% lander.N = N;
% lander.C_b = C_b;
% lander.C_s = C_s;
% lander.W = W;
% lander.Pinned_nodes = [];
% % lander.Pinned_nodes = [1 1 1 1;3 1 1 1;8 1 1 1];
% % lander.Pinned_nodes = [2 1 1 1;4 1 1 1;5 1 1 1];
% 
% [Force_den,Support_Load] = tenseg_equilibrium(lander);
% gamma = Force_den(1:size(C_s,1),1)
% lambda = Force_den(1+size(C_s,1):end,1)
%%
mb = 1;
% ms = .02;
% F = 1.5e2;
tf = 5; dt = 0.0005;

% for i = 1:tf/dt
%     W(:,:,i) = [zeros(2,size(N,2));-mb/2*9.8*ones(1,size(N,2))];
% end
    
% W1 = zeros(size(N));
% W = -F*[zeros(2,size(N,2));ones(1,size(N,2))];
% W1(:,[1,3,8]) = F/3*[zeros(2,3);ones(1,3)];
% W1(:,[2,4,5]) = -F/3*[zeros(2,3);ones(1,3)];

% W = zeros([size(N),tf/dt]);

% for i = 50:60
% W(:,:,i) = W(:,:,i)+W1;
% end

% W = [zeros(2,size(N,2));[-mb/2*9.8*ones(1,12) -ms*9.8*ones(1,size(N,2)-12)]];


%Specify resting string lengths

% Here, we're setting every string rest length to 70% of its given length
S_0_percent = [(1:size(C_s,1))', .8*ones(size(C_s,1),1)]; % percent of initial lengths

% This function converts those specified percentages into rest lengths
s_0 = tenseg_percent2s0(N,C_s,S_0_percent,parents);

% Nd0 = zeros(size(N));
% Nd0(3,:) = -1*ones(1,size(N,2));

%%
% Create data structure defining structure simulation task
lander.N = N;
% prism.Nd0 = Nd0;
lander.C_b = C_b;
lander.C_s = C_s;
lander.s_0 = s_0;
lander.k = 5000;
lander.c = 1;
lander.W = 'W_example_lander';
% lander.ms = ms;

% These are optional inputs. If unspecified, default values will be loaded.
%    check tenseg_defaults.m to see/change these default values
lander.video = 0; % This turns off automatic animation output
lander.tf = tf;    % This sets the final simulation time to 3 sec 
lander.dt = dt; % This sets the simulation time step to 0.02 sec


% Perform Simulation
% History is a data structure containing simulation results
% sim_debug is a data structure containing a bunch of internally used variables
[History,sim_debug] = tenseg_sim_class1open(lander);


%% Create plots with 3D objects 
lander.Bradius = 0.02*ones(size(C_b,1),1); % Radius of bars [# bars x 1]
lander.Sradius = 0.005*ones(size(C_s,1),1); % Radius of strings [# strings x 1]
lander.Nradius = 0.008*ones(size(N,2),1); % Radius of node spheres [# nodes x 1]
% lander.Bradius = 0.1*ones(size(lander.C_b,1),1); % Radius of bars [# bars x 1]
% lander.Sradius = 0.04*ones(size(lander.C_s,1),1); % Radius of strings [# strings x 1]
% lander.Nradius = 0.05*ones(size(lander.N,2),1); % Radius of node spheres [# nodes x 1]

% Plotting configurations
% number_of_configurations = 3; % Number of configurations to plot
% tenseg_plot_configurations(Hist, classK_test, number_of_configurations)

figure()
tenseg_plot_node(History,[2 3 4],[1 3])

X = History.Nhist(3,1:12,:);
centre_z_pos = sum(X)/12;
centre_z_pos = reshape(centre_z_pos,1,[]);

%%
figure()
plot(History.t,centre_z_pos,'LineWidth',2)
ylabel('Vertical Distance (m)','Interpreter','latex')
% ylim([19.99 20.01])
xlabel('Time (s)','Interpreter','latex')
% xticks([0 100 200 300 400 500 600])
% xticklabels({'0','10','20','30','40','50','60'})
% yticks([20-1e-12 20 20+1e-12 20+3e-12 20+5e-12])
% yticklabels({'20-1e^{-12}','20','20+1e^{-12}','20+3e^{-12}','20+5e^{-12}'})
    set(gca,'fontsize', 15,'linewidth',1.15)
    set(gca,'ticklength',1.2*get(gca,'ticklength'))
    
%%
for plot_no = 1800:10:1810

N_plot = History.Nhist(:,:,plot_no);
% % Plot structure to see what string segmentation looks like
plot_handle1 = tenseg_plot(N_plot,C_b,C_s,[],[],[],[],lander);
axis off
hold on
[X,Y] = meshgrid(-0.8:0.05:0.8,-0.5:0.05:1);
Z = -0.1*ones(size(X));
surf(X,Y,Z,'MeshStyle','none','FaceColor',[0.99 0.99 0.99]);
end

%%
bar_length_violation = History.bar_len(6,:)-ones(1,10001);
plot(History.t,bar_length_violation')
ylabel('Violation in bar length (m)','Interpreter','latex')
xlabel('Time (s)','Interpreter','latex')
set(gca,'fontsize', 15,'linewidth',1.15)
set(gca,'ticklength',1.2*get(gca,'ticklength'))
%%
% Create animation
tenseg_animation(History, lander,[],[],[],[],200)
